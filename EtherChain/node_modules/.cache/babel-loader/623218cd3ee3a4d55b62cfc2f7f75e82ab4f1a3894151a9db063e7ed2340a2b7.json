{"ast":null,"code":"var _jsxFileName = \"/Users/garrichfarrell/Desktop/Innovation Project/Innovation/EtherChain/src/containers/network-viz/network-viz.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './network-viz.css';\nimport { NetworkVisualization } from '../../components';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkViz = () => {\n  _s();\n  let data = {\n    wallets: [],\n    transactions: []\n  };\n  // const data = {\n  //   wallets: ['wallet1', 'wallet2', 'wallet3', 'wallet4', 'wallet5', 'wallet6', 'wallet7', 'wallet8'],\n  //   transactions: [\n  //     { from: 'wallet1', to: 'wallet2', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet3', tokens: 5 },\n  //     { from: 'wallet1', to: 'wallet4', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet5', tokens: 12 },\n  //     { from: 'wallet1', to: 'wallet6', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet7', tokens: 12 },\n  //     { from: 'wallet7', to: 'wallet8', tokens: 10 },\n  //   ],\n  // };\n\n  const [addressId, setAddressIds] = useState([]);\n  const [wallets, setWallets] = useState([]);\n  useEffect(() => {\n    // Fetch the addressIds using Axios when the component mounts\n    axios.get('http://127.0.0.1:8000/getAllNodes').then(response => {\n      // let data = {wallets:[]}\n      const addressId = response.data;\n      for (let i = 0; i < addressId.nodes.length; i++) {\n        data.wallets.push(addressId.nodes[i].addressId);\n      }\n      axios.get('http://127.0.0.1:8000/getAllNodesAndRelationships').then(response => {\n        const fromTo = response.data;\n        // console.log(fromTo)\n\n        // Iterate through the response data and format it into the desired transactions format\n        for (let i = 0; i < fromTo.r.length; i++) {\n          let from = fromTo.r[i].from;\n          let to = fromTo.r[i].to;\n\n          // Assuming your response data has properties 'from', 'to', and 'tokens'\n          // const from = transaction.from;\n          // const to = transaction.to;\n\n          data.transactions.push({\n            from,\n            to\n          });\n        }\n        console.log(data.transactions);\n        // Now, you can use the 'transactions' array as needed\n        // console.log(data.transactions);\n        // console.log(\"test\")\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n\n      // if (data.addressId) {  \n      //   setAddressIds(data.addressId);\n\n      //   // Create wallets based on addressIds\n      //   const generatedWallets = data.addressId.map((addressId, index) => {\n      //     return {\n      //       id: `wallet_${addressId}`,\n      //       // addressId: addressId,\n      //       // Add other wallet properties as needed\n      //     };\n      //   });\n      //   setWallets(generatedWallets);\n      // }\n    }).catch(error => {\n      console.error('Error fetching addressIds:', error);\n    });\n\n    // console.log(data)   \n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ether_visualization section__padding\",\n    id: \"visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ether__vizualization-heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"gradient__text\",\n        children: \"Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"network\",\n      id: \"network_container\",\n      children: /*#__PURE__*/_jsxDEV(NetworkVisualization, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkViz, \"D+L58xShfjRV9mY6Ydxj7RMC+qk=\");\n_c = NetworkViz;\nexport default NetworkViz;\nvar _c;\n$RefreshReg$(_c, \"NetworkViz\");","map":{"version":3,"names":["React","useEffect","useState","NetworkVisualization","axios","jsxDEV","_jsxDEV","NetworkViz","_s","data","wallets","transactions","addressId","setAddressIds","setWallets","get","then","response","i","nodes","length","push","fromTo","r","from","to","console","log","catch","error","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/garrichfarrell/Desktop/Innovation Project/Innovation/EtherChain/src/containers/network-viz/network-viz.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './network-viz.css'\nimport { NetworkVisualization } from '../../components'\nimport axios from 'axios';\n\nconst NetworkViz = () => {\n  let data = {\n    wallets: [],\n    transactions: []\n  }\n  // const data = {\n  //   wallets: ['wallet1', 'wallet2', 'wallet3', 'wallet4', 'wallet5', 'wallet6', 'wallet7', 'wallet8'],\n  //   transactions: [\n  //     { from: 'wallet1', to: 'wallet2', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet3', tokens: 5 },\n  //     { from: 'wallet1', to: 'wallet4', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet5', tokens: 12 },\n  //     { from: 'wallet1', to: 'wallet6', tokens: 10 },\n  //     { from: 'wallet1', to: 'wallet7', tokens: 12 },\n  //     { from: 'wallet7', to: 'wallet8', tokens: 10 },\n  //   ],\n  // };\n\n  const [addressId, setAddressIds] = useState([]);\n  const [wallets, setWallets] = useState([]);\n\n  useEffect(() => {\n    // Fetch the addressIds using Axios when the component mounts\n    axios\n      .get('http://127.0.0.1:8000/getAllNodes')\n      .then(response => {\n        // let data = {wallets:[]}\n        const addressId = response.data;\n        for (let i = 0; i < addressId.nodes.length; i++) {\n          data.wallets.push(addressId.nodes[i].addressId)\n        }\n\n        axios.get('http://127.0.0.1:8000/getAllNodesAndRelationships')\n          .then(response => {\n            const fromTo = response.data;\n            // console.log(fromTo)\n\n            // Iterate through the response data and format it into the desired transactions format\n            for (let i = 0; i < fromTo.r.length; i++) {\n              let from = fromTo.r[i].from;\n              let to = fromTo.r[i].to;\n\n\n              // Assuming your response data has properties 'from', 'to', and 'tokens'\n              // const from = transaction.from;\n              // const to = transaction.to;\n\n              data.transactions.push({ from, to });\n            }\n            \n            console.log(data.transactions)\n            // Now, you can use the 'transactions' array as needed\n            // console.log(data.transactions);\n            // console.log(\"test\")\n          })\n          .catch(error => {\n            console.error('Error fetching data:', error);\n          });\n\n        // if (data.addressId) {  \n        //   setAddressIds(data.addressId);\n\n        //   // Create wallets based on addressIds\n        //   const generatedWallets = data.addressId.map((addressId, index) => {\n        //     return {\n        //       id: `wallet_${addressId}`,\n        //       // addressId: addressId,\n        //       // Add other wallet properties as needed\n        //     };\n        //   });\n        //   setWallets(generatedWallets);\n        // }\n      })\n      .catch(error => {\n        console.error('Error fetching addressIds:', error);\n      });\n\n    // console.log(data)   \n  }, []);\n\n\n  return (\n    <div className='ether_visualization section__padding' id=\"visualization\">\n      <div className=\"ether__vizualization-heading\">\n        <h1 className=\"gradient__text\">Visualization</h1>\n      </div>\n      <svg className='network' id='network_container'>\n        <NetworkVisualization data={data} />\n      </svg>\n    </div>\n  )\n}\n\nexport default NetworkViz"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}