{"ast":null,"code":"var _jsxFileName = \"/Users/garrichfarrell/Desktop/Innovation Project/Innovation/EtherChain/src/components/network/network.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as d3Drag from 'd3-drag'; // Import d3-drag for node dragging\nimport './network.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet originalNodes;\nlet originalLinks;\nlet links;\nlet nodes;\nlet link;\nlet node;\nlet labelsGroup;\nlet initalized = false;\nconst NetworkVisualization = ({\n  data\n}) => {\n  _s();\n  // Create a reference to the SVG element\n  const svgRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth * 0.7);\n  const [height, setHeight] = useState(window.innerHeight * 0.7);\n  let [clickedNode, setClickedNode] = useState(null);\n  // console.log(\"test\");\n  if (initalized == false) {\n    // Create nodes and links based on the data prop\n    nodes = data.wallets.map(wallet => ({\n      id: wallet\n    }));\n    links = data.transactions.map(transaction => ({\n      source: transaction.from,\n      target: transaction.to,\n      tokens: transaction.tokens\n    }));\n    console.log(nodes);\n    originalNodes = nodes;\n    originalLinks = links;\n    initalized = true;\n  }\n  console.log(initalized);\n  let strength,\n    labelBackgroundHeight,\n    labelBackgroundWidth,\n    labelX,\n    labelY,\n    labelTextY,\n    labelTextX,\n    countTextX,\n    countTextY = 0;\n\n  // Initialization of variables for dimensions and forces\n  // let width = window.innerWidth * 0.7;\n  // let height = window.innerHeight * 0.7;\n\n  // Determine values based on the screen width\n  if (width <= 550) {\n    strength = -1500;\n    labelBackgroundWidth = 90;\n    labelBackgroundHeight = 25;\n    labelY = 45;\n    labelX = 50;\n    labelTextY = 20;\n    labelTextX = 47;\n    countTextY = 52;\n    countTextX = 50;\n  } else if (width <= 1000) {\n    strength = -3000;\n    labelBackgroundWidth = 90;\n    labelBackgroundHeight = 25;\n    labelY = 45;\n    labelX = 50;\n    labelTextY = 20;\n    labelTextX = 47;\n    countTextY = 62;\n    countTextX = 50;\n  } else {\n    strength = -5000;\n    labelBackgroundWidth = 100;\n    labelBackgroundHeight = 30;\n    labelY = 64;\n    labelX = 50;\n    labelTextY = 22;\n    labelTextX = 50;\n    countTextY = 72;\n    countTextX = 50;\n  }\n  // useEffect to manage D3.js visualization\n\n  const updateDimensions = () => {\n    setWidth(window.innerWidth * 0.7);\n    setHeight(window.innerHeight * 0.7);\n  };\n  useEffect(() => {\n    window.addEventListener('resize', updateDimensions);\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n  useEffect(() => {\n    // Select the SVG element using the reference\n    const svg = d3.select(svgRef.current);\n    // // Create a D3.js force simulation\n    let simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody().strength(strength)).force('center', d3.forceCenter(width / 2, height / 2)).on('tick', tick);\n    function createSVGElements() {\n      // Create SVG elements for links, nodes, and labels\n      link = svg.selectAll('.link').data(links).enter().append('line').attr('class', 'link');\n      node = svg.selectAll('.node').data(nodes).enter().append('circle').attr('class', 'node');\n      // console.log(\"Cool\")\n      // Enable drag behavior for the nodes\n      node.call(d3Drag.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded))\n      // Add a click event handler to each node\n      .on('click', (event, d) => {\n        // console.log(\"Cool\")\n        // Call the function to remove labels\n        console.log(`Clicked Node ID: ${d.id}`);\n        // setClickedNode(d.id);\n        const connectedNodes = new Set();\n        const filteredLinks = originalLinks.filter(link => {\n          connectedNodes.add(d.id);\n          if (link.source.id === d.id) {\n            connectedNodes.add(link.target.id);\n            return true;\n          }\n          if (link.target.id === d.id) {\n            connectedNodes.add(link.source.id);\n            return true;\n          }\n          return false;\n        });\n        const filteredNodes = originalNodes.filter(n => connectedNodes.has(n.id));\n        simulation.nodes(filteredNodes).force('link', d3.forceLink(filteredLinks).id(d => d.id));\n        link = link.data(filteredLinks);\n        node = node.data(filteredNodes);\n        labelsGroup = labelsGroup.data(filteredNodes);\n        // console.log('ded')\n\n        link.exit().remove();\n        node.exit().remove();\n        labelsGroup.exit().remove();\n        const nodeEnter = node.enter().append('circle').attr('class', 'node');\n        const linkEnter = link.enter().append('line').attr('class', 'link');\n        const labelsEnter = labelsGroup.enter().append('g').attr('class', 'label-group');\n        link = linkEnter.merge(link);\n        node = nodeEnter.merge(node);\n        labelsGroup = labelsEnter.merge(labelsGroup);\n        links = filteredLinks;\n        node.call(d3Drag.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));\n        nodes = filteredNodes;\n        simulation.alpha(1).restart();\n        setClickedNode(d.id);\n      });\n      // console.log(\"Cool\")\n\n      labelsGroup = svg.selectAll('.label-group').data(nodes).enter().append('g').attr('class', 'label-group');\n\n      // Create background rectangles for labels\n      labelsGroup.append('rect').attr('class', 'label-bg').attr('rx', 5) // Rounded corners\n      .attr('ry', 5).attr('width', labelBackgroundWidth) // Set the width of the background rectangle\n      .attr('height', labelBackgroundHeight) // Set the height of the background rectangle\n      .attr('fill', 'lightgray'); // Background color\n\n      // Create text labels and position them\n      labelsGroup.append('text').attr('class', 'label').text(d => d.id).attr('dy', labelTextY) // Adjust label vertical position\n      .attr('dx', labelTextX).attr('text-anchor', 'middle'); // Center-align the text\n    }\n\n    // Call the createSVGElements function during initialization\n    createSVGElements();\n\n    // Function to reset the visualization after simulation refresh\n    function resetVisualization() {\n      // Remove existing elements\n      svg.selectAll('.link').remove();\n      svg.selectAll('.node').remove();\n      svg.selectAll('.label-group').remove();\n      // console.log(\"Cool\")\n      // Call createSVGElements again to reappend elements in the desired order\n      createSVGElements();\n    }\n    // Event handler for node drag start\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    // Event handler for node drag\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    // Event handler for node drag end\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    // Function to update positions on each animation frame\n    function tick() {\n      // console.log(\"Cool Dawg\")\n      resetVisualization();\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('cx', d => {\n        d.x = Math.max(labelBackgroundWidth / 2, Math.min(width - labelBackgroundWidth / 2, d.x));\n        return d.x;\n      });\n      node.attr('cy', d => {\n        d.y = Math.max(labelBackgroundHeight / 2, Math.min(height - labelBackgroundHeight / 2, d.y));\n        return d.y;\n      });\n      labelsGroup.attr('transform', d => `translate(${d.x - labelX},${d.y - labelY})`); // Position the label group\n\n      // Request the next animation frame\n      requestAnimationFrame(tick);\n    }\n    // console.log(\"Cool\")\n    // Start the simulation and initiate animation\n    simulation.on('tick', tick);\n  }, [data, height, width, clickedNode]);\n  return (\n    /*#__PURE__*/\n    // Render the SVG element where the visualization will be displayed\n    _jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(NetworkVisualization, \"iFPUZ5UWqks2QdWpjQRI89PwSto=\");\n_c = NetworkVisualization;\nexport default NetworkVisualization;\nvar _c;\n$RefreshReg$(_c, \"NetworkVisualization\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","d3Drag","jsxDEV","_jsxDEV","originalNodes","originalLinks","links","nodes","link","node","labelsGroup","initalized","NetworkVisualization","data","_s","svgRef","width","setWidth","window","innerWidth","height","setHeight","innerHeight","clickedNode","setClickedNode","wallets","map","wallet","id","transactions","transaction","source","from","target","to","tokens","console","log","strength","labelBackgroundHeight","labelBackgroundWidth","labelX","labelY","labelTextY","labelTextX","countTextX","countTextY","updateDimensions","addEventListener","removeEventListener","svg","select","current","simulation","forceSimulation","force","forceLink","d","forceManyBody","forceCenter","on","tick","createSVGElements","selectAll","enter","append","attr","call","drag","dragStarted","dragged","dragEnded","event","connectedNodes","Set","filteredLinks","filter","add","filteredNodes","n","has","exit","remove","nodeEnter","linkEnter","labelsEnter","merge","alpha","restart","text","resetVisualization","active","alphaTarget","fx","x","fy","y","Math","max","min","requestAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/garrichfarrell/Desktop/Innovation Project/Innovation/EtherChain/src/components/network/network.js"],"sourcesContent":["import React from 'react';\nimport { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as d3Drag from 'd3-drag'; // Import d3-drag for node dragging\nimport './network.css';\nlet originalNodes\nlet originalLinks;\nlet links;\nlet nodes;\nlet link;\nlet node;\nlet labelsGroup;\nlet initalized = false;\n\nconst NetworkVisualization = ({ data }) => {\n  // Create a reference to the SVG element\n  const svgRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth * 0.7);\n  const [height, setHeight] = useState(window.innerHeight * 0.7);\n\n  let [clickedNode, setClickedNode] = useState(null);\n  // console.log(\"test\");\n  if (initalized == false) {\n    // Create nodes and links based on the data prop\n    nodes = data.wallets.map(wallet => ({ id: wallet }));\n    links = data.transactions.map(transaction => ({\n      source: transaction.from,\n      target: transaction.to,\n      tokens: transaction.tokens,\n\n    }));\n    console.log(nodes)\n    originalNodes = nodes;\n    originalLinks = links;\n    initalized = true;\n  }\n  console.log(initalized)\n\n  let strength, labelBackgroundHeight, labelBackgroundWidth, labelX, labelY, labelTextY, labelTextX, countTextX, countTextY= 0;\n\n  // Initialization of variables for dimensions and forces\n  // let width = window.innerWidth * 0.7;\n  // let height = window.innerHeight * 0.7;\n\n  // Determine values based on the screen width\n  if (width <= 550) {\n    strength = -1500;\n    labelBackgroundWidth = 90;\n    labelBackgroundHeight = 25;\n    labelY = 45;\n    labelX = 50;\n    labelTextY = 20;\n    labelTextX = 47;\n    countTextY = 52;\n    countTextX = 50;\n  } else if (width <= 1000) {\n    strength = -3000;\n    labelBackgroundWidth = 90;\n    labelBackgroundHeight = 25;\n    labelY = 45;\n    labelX = 50;\n    labelTextY = 20;\n    labelTextX = 47;\n    countTextY = 62;\n    countTextX = 50;\n  } else {\n    strength = -5000;\n    labelBackgroundWidth = 100;\n    labelBackgroundHeight = 30;\n    labelY = 64;\n    labelX = 50;\n    labelTextY = 22;\n    labelTextX = 50;\n    countTextY = 72;\n    countTextX = 50;\n  }\n  // useEffect to manage D3.js visualization\n\n  const updateDimensions = () => {\n    setWidth(window.innerWidth * 0.7);\n    setHeight(window.innerHeight * 0.7);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', updateDimensions);\n\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n\n  useEffect(() => {\n\n    // Select the SVG element using the reference\n    const svg = d3.select(svgRef.current);\n    // // Create a D3.js force simulation\n    let simulation = d3.forceSimulation(nodes)\n      .force('link', d3.forceLink(links).id(d => d.id))\n      .force('charge', d3.forceManyBody().strength(strength))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n      .on('tick', tick);\n\n    function createSVGElements() {\n\n      // Create SVG elements for links, nodes, and labels\n      link = svg.selectAll('.link')\n        .data(links)\n        .enter().append('line')\n        .attr('class', 'link');\n\n      node = svg.selectAll('.node')\n        .data(nodes)\n        .enter().append('circle')\n        .attr('class', 'node')\n        // console.log(\"Cool\")\n      // Enable drag behavior for the nodes\n      node.call(d3Drag.drag()\n        .on(\"start\", dragStarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragEnded))\n        // Add a click event handler to each node\n        .on('click', (event, d) => {\n          // console.log(\"Cool\")\n          // Call the function to remove labels\n          console.log(`Clicked Node ID: ${d.id}`);\n          // setClickedNode(d.id);\n          const connectedNodes = new Set();\n          const filteredLinks = originalLinks.filter((link) => {\n            connectedNodes.add(d.id)\n            if (link.source.id === d.id) {\n\n              connectedNodes.add(link.target.id);\n              return true;\n            }\n            if (link.target.id === d.id) {\n              connectedNodes.add(link.source.id);\n              return true;\n            }\n            return false;\n          });\n          const filteredNodes = originalNodes.filter((n) => connectedNodes.has(n.id));\n          simulation.nodes(filteredNodes).force('link', d3.forceLink(filteredLinks).id(d => d.id));\n          link = link.data(filteredLinks);\n          node = node.data(filteredNodes);\n          labelsGroup = labelsGroup.data(filteredNodes);\n          // console.log('ded')\n          \n          link.exit().remove();\n          node.exit().remove();\n          labelsGroup.exit().remove();\n\n          const nodeEnter = node.enter().append('circle').attr('class', 'node');\n          const linkEnter = link.enter().append('line').attr('class', 'link');\n          const labelsEnter = labelsGroup.enter().append('g').attr('class', 'label-group');\n\n          link = linkEnter.merge(link);\n          node = nodeEnter.merge(node);\n          labelsGroup = labelsEnter.merge(labelsGroup)\n\n\n          links = filteredLinks;\n          node.call(d3Drag.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));\n          nodes = filteredNodes;\n          simulation.alpha(1).restart();\n          setClickedNode(d.id);\n        });\n        // console.log(\"Cool\")\n        \n      labelsGroup = svg.selectAll('.label-group')\n      .data(nodes)\n      .enter().append('g')\n      .attr('class', 'label-group');\n\n      // Create background rectangles for labels\n      labelsGroup\n        .append('rect')\n        .attr('class', 'label-bg')\n        .attr('rx', 5) // Rounded corners\n        .attr('ry', 5)\n        .attr('width', labelBackgroundWidth) // Set the width of the background rectangle\n        .attr('height', labelBackgroundHeight) // Set the height of the background rectangle\n        .attr('fill', 'lightgray'); // Background color\n\n      // Create text labels and position them\n      labelsGroup\n        .append('text')\n        .attr('class', 'label')\n        .text(d => d.id)\n        .attr('dy', labelTextY) // Adjust label vertical position\n        .attr('dx', labelTextX)\n        .attr('text-anchor', 'middle'); // Center-align the text\n\n    }\n\n    // Call the createSVGElements function during initialization\n    createSVGElements();\n\n    // Function to reset the visualization after simulation refresh\n    function resetVisualization() {\n      // Remove existing elements\n      svg.selectAll('.link').remove();\n      svg.selectAll('.node').remove();\n      svg.selectAll('.label-group').remove();\n      // console.log(\"Cool\")\n      // Call createSVGElements again to reappend elements in the desired order\n      createSVGElements();\n    }\n    // Event handler for node drag start\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    // Event handler for node drag\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    // Event handler for node drag end\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    // Function to update positions on each animation frame\n    function tick() {\n      // console.log(\"Cool Dawg\")\n      resetVisualization();\n      link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n\n      node.attr('cx', d => {\n        d.x = Math.max(labelBackgroundWidth / 2, Math.min(width - labelBackgroundWidth / 2, d.x));\n        return d.x;\n      });\n\n      node.attr('cy', d => {\n        d.y = Math.max(labelBackgroundHeight / 2, Math.min(height - labelBackgroundHeight / 2, d.y));\n        return d.y;\n      });\n\n      labelsGroup\n        .attr('transform', d => `translate(${d.x - labelX},${d.y - labelY})`); // Position the label group\n\n      // Request the next animation frame\n      requestAnimationFrame(tick);\n    }\n    // console.log(\"Cool\")\n    // Start the simulation and initiate animation\n    simulation.on('tick', tick);\n\n  }, [data, height, width, clickedNode]);\n\n  return (\n    // Render the SVG element where the visualization will be displayed\n    <svg ref={svgRef}>\n      {/* Add any additional SVG elements if needed */}\n    </svg>\n\n  );\n};\n\nexport default NetworkVisualization;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}